<?php

/**
 * @file
 * Implements eRaty hire purchase payments in Drupal Commerce checkout.
 */

/**
 * Implements hook_menu().
 */
function commerce_eraty_menu() {
  $items['commerce_eraty/response'] = array(
    'title' => 'Verify transaction',
    'page callback' => 'commerce_eraty_handle_response',
    'access arguments' => array('access checkout'),
    'file' => 'commerce_eraty.pages.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_eraty_commerce_payment_method_info() {
  $payment_methods['commerce_eraty'] = array(
    'title' => t('Santander eRaty'),
    'description' => t('Pay for an order by hire purchase.'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'active' => TRUE,
  );
  return $payment_methods;
}

/**
 * Implements CALLBACK_commerce_payment_method_settings_form().
 */
function commerce_eraty_settings_form($settings = NULL) {
  $form = array();

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + commerce_eraty_get_default_settings();

  $form['shop_number'] = array(
    '#title' => t('Shop number'),
    '#description' => t('For testing use @shop-number.', array('@shop-number' => '13010005')),
    '#type' => 'textfield',
    '#default_value' => $settings['shop_number'],
    '#required' => TRUE,
  );
  $form['shop_variant'] = array(
    '#title' => t('Shop variant'),
    '#description' => t('For testing use @shop-variant.', array('@shop-variant' => '1')),
    '#type' => 'textfield',
    '#default_value' => $settings['shop_variant'],
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form().
 */
function commerce_eraty_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $path = drupal_get_path('module', 'commerce_eraty');
  drupal_add_js($path . '/js/commerce_eraty.js');

  $settings = commerce_eraty_get_settings($payment_method);

  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total = $wrapper->commerce_order_total->amount->value() / 100;

  $form['calculate'] = array(
    '#weight' => 99,
    '#theme' => 'commerce_eraty_calculate_button',
    '#shop_number' => $settings['shop_number'],
    '#shop_variant' => $settings['shop_variant'],
    '#total_cost' => $order_total,
  );

  $form['agree'] = array(
    '#title' => t('I have read <a href="@url">the procedure of the loan for the purchase of consumer goods and services eRaty SantanderConsumer Finance</a>.', array(
      '@url' => 'https://www.scfinanse.pl/raty-jak-kupic')),
    '#type' => 'checkbox',
    '#attributes' => array(
      'id' => array(
        'commerce-eraty-rules',
      ),
    ),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_submit_form_validate().
 */
function commerce_eraty_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();

  if (empty($payment_method['settings']['shop_number']) || empty($payment_method['settings']['shop_variant'])) {
    drupal_set_message(t('eRaty service is not configured for use.'), 'error');
    return FALSE;
  }
  elseif (($amount / 100) < 100) {
    drupal_set_message(t('You can purchase on eRaty instalments only if the total cost of your purchase is equal or greater than @amount.', array('@amount' => '100PLN')), 'error');
    return FALSE;
  }
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_eraty_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $amount = $wrapper->commerce_order_total->amount->value();
  $i = 1;
  $products = array();
  $product_counter = 0;

  foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    $line_item = $line_item_wrapper->value();
    $product = commerce_product_load($line_item->line_item_id);

    $products['idTowaru' . $i] = $line_item->line_item_id;
    $products['nazwaTowaru' . $i] = $line_item->line_item_label;

    if ($line_item->type == 'shipping') {
      $shipping_method = $line_item->line_item_label;
    }
    elseif ($line_item->type == 'product') {
      $products['nazwaTowaru' . $i] = $product->title . ' (' . $line_item->line_item_label . ')';
    }

    $products['wartoscTowaru' . $i] = $line_item->commerce_total[LANGUAGE_NONE][0]['amount'] / 100;
    $products['liczbaSztukTowaru' . $i] = $line_item->quantity;
    $products['jednostkaTowaru' . $i] = 'szt.';

    if ($line_item->type == 'shipping') {
      $shipping_method = $line_item->line_item_label;
    }

    $product_counter += $line_item->quantity;

    $i++;
  }

  $url_success = url('commerce_eraty/response/' . $order->order_id . '/success/' . $order->data['payment_redirect_key'], array('absolute' => TRUE, 'query' => array('order_id' => '')));
  $url_cancel = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE, 'query' => array('order_id' => '')));

  $data = $products + array(
    // Shop and order informations.
    'wartoscTowarow' => $amount / 100,
    'liczbaSztukTowarow' => $product_counter,
    'numerSklepu' => $payment_method['settings']['shop_number'],
    'typProduktu' => 0,
    'wariantSklepu' => $payment_method['settings']['shop_variant'],
    'sposobDostarczeniaTowaru' => $shipping_method,
    'nrZamowieniaSklep' => $order->order_id,
    // Informations about customer.
    'pesel' => '',
    'imie' => '',
    'nazwisko' => '',
    'email' => $order->mail,
    'telKontakt' => '',
    'ulica' => '',
    'nrDomu' => '',
    'nrMieszkania' => '',
    'miasto' => '',
    'kodPocz' => '',
    // Other stuff.
    'char' => 'UTF',
    // Callback urls.
    // At the end of both urls is adding order id.
    // [nr_zamowienia]&id_wniosku=[nr_wniosku]
    'wniosekZapisany' => $url_success,
    'wniosekAnulowany' => $url_cancel,
  );

  $address = $wrapper->commerce_customer_billing->commerce_customer_address;

  $params_map = array(
    'imie' => 'first_name',
    'nazwisko' => 'last_name',
    'ulica' => 'thoroughfare',
    'miasto' => 'locality',
    'kodPocz' => 'postal_code',
  );

  foreach ($params_map as $key => $field) {
    if (isset($address->$field)) {
      $data[$key] = $address->$field->value();
    }
  }

  if (isset($address->name_line)) {
    $name_line = $address->name_line->value();
    if (!empty($name_line)) {
      $name_line = explode(' ', $name_line);
      if (!empty($name_line[0])) {
        $data['imie'] = trim($name_line[0]);
      }
      if (!empty($name_line[1])) {
        $data['nazwisko'] = trim($name_line[1]);
        if (!empty($name_line[2])) {
          $data['nazwisko'] .= ' ' . trim($name_line[2]);
        }
      }
    }
  }

  $form['#action'] = 'https://wniosek.eraty.pl/formularz/';

  // Create hidden fields from $data array.
  foreach ($data as $name => $value) {
    if (!empty($value)) {
      $form[$name] = array('#type' => 'hidden', '#value' => $value);
    }
  }

  // After clicking this button customer is redirected to form action URL.
  $form['submit'] = array(
    '#type' => 'image_button',
    '#button_type' => 'image_button',
    '#src' => 'https://www.eraty.pl/images/bannery/zlozwniosek_white.png',
  );

  return $form;
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Processing entire order.
 */
function commerce_eraty_form_views_form_commerce_cart_form_default_alter(&$form, &$form_state) {
  global $user;

  $settings = commerce_eraty_get_settings();

  $order = commerce_cart_order_load($user->uid);
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_total  = $order_wrapper->commerce_order_total->value();
  $order_total_converted = commerce_currency_convert($order_total['amount'], $order_total['currency_code'], 'PLN');
  $order_total_prepared = commerce_currency_amount_to_decimal($order_total_converted, 'PLN');

  $form['calculate'] = array(
    '#weight' => 99,
    '#theme' => 'commerce_eraty_calculate_button',
    '#shop_number' => $settings['shop_number'],
    '#shop_variant' => $settings['shop_variant'],
    '#total_cost' => $order_total_prepared,
  );
}

/**
 * Implements hook_form_FORMID_alter().
 *
 * Processing single product.
 */
function commerce_eraty_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  $settings = commerce_eraty_get_settings();

  $price = commerce_product_calculate_sell_price($form_state['default_product']);
  $price_converted = commerce_currency_convert($price['amount'], $price['currency_code'], 'PLN');
  $price_prepared = commerce_currency_amount_to_decimal($price_converted, 'PLN');

  $form['calculate'] = array(
    '#weight' => 99,
    '#theme' => 'commerce_eraty_calculate_button',
    '#shop_number' => $settings['shop_number'],
    '#shop_variant' => $settings['shop_variant'],
    '#total_cost' => $price_prepared,
  );
}

/**
 * Get payment method settings.
 */
function commerce_eraty_get_settings($payment_method = NULL) {
  $default_settings = commerce_eraty_get_default_settings();
  if (empty($payment_method)) {
    $payment_method = commerce_payment_method_instance_load('eraty|commerce_payment_eraty');
  }
  return array(
    'shop_number' => !empty($payment_method['settings']['shop_number']) ? $payment_method['settings']['shop_number'] : $default_settings['shop_number'],
    'shop_variant' => !empty($payment_method['settings']['shop_variant']) ? $payment_method['settings']['shop_variant'] : $default_settings['shop_variant'],
    'product_type' => 0,
  );
}

/**
 * Returns the default settings.
 */
function commerce_eraty_get_default_settings() {
  return array(
    // For test use 13010005.
    'shop_number' => 13010005,
    'shop_variant' => 1,
    'product_type' => 0,
  );
}

/**
 * Implements hook_theme().
 */
function commerce_eraty_theme() {
  return array(
    'commerce_eraty_calculate_button' => array(
      'variables' => array(
        'shop_number' => NULL,
        'shop_variant' => NULL,
        'total_cost' => NULL,
      ),
    ),
    'commerce_eraty_how_to_buy_button' => array(),
  );
}

/**
 * Themes a calculate eRaty button.
 *
 * @param array $variables
 *   Includes the 'shop_number', 'shop_variant' and 'total_cost' variables.
 */
function theme_commerce_eraty_calculate_button($variables) {
  drupal_add_library('system', 'ui.dialog');
  $path = drupal_get_path('module', 'commerce_eraty');
  drupal_add_js($path . '/js/commerce_eraty.js');
  drupal_add_css($path . '/css/commerce_eraty.css');

  if ($variables['total_cost'] < 100) {
    return;
  }

  $button = array(
    'path' => 'https://www.eraty.pl/images/bannery/oblicz_white.png',
    'alt' => t('Calculate the amount of installment loan'),
    'title' => t('Calculate the amount of installment loan'),
  );
  $url = 'https://wniosek.eraty.pl/symulator/oblicz/numerSklepu/' . $variables['shop_number'] . '/wariantSklepu/' . $variables['shop_variant'] . '/typProduktu/0/wartoscTowarow/' . $variables['total_cost'];
  $link = l(theme('image', $button), $url, array('html' => TRUE));
  $wrapper = '<div id="commerce-eraty-calculate-button" class="form-actions commerce-eraty-button">' . $link . '</div>';
  return $wrapper;
}

/**
 * Themes a eRaty how to buy button.
 */
function theme_commerce_eraty_how_to_buy_button() {
  $path = drupal_get_path('module', 'commerce_eraty');
  drupal_add_js($path . '/js/commerce_eraty.js');
  $button = array(
    'path' => 'https://www.eraty.pl/images/bannery/jakkupic_white.png',
    'alt' => t('How to buy with eRaty?'),
    'title' => t('How to buy with eRaty?'),
  );
  $link = l(theme('image', $button), 'https://www.scfinanse.pl/raty-jak-kupic', array('html' => TRUE));
  return '<div id="commerce-eraty-how-to-buy-button" class="commerce-eraty-button">' . $link . '</div>';
}

/**
 * Implements hook_block_info().
 */
function commerce_eraty_block_info() {
  $blocks['how_to_buy'] = array(
    'info' => t('How to buy with eRaty?'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function commerce_eraty_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'how_to_buy':
      $block['subject'] = t('How to buy with eRaty?');
      $block['content'] = theme('commerce_eraty_how_to_buy_button');
      break;
  }
  return $block;
}
